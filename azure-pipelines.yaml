name: Azure Pipelines

trigger:
- master

variables:
  python.version: '3.8.10'
  terraformVersion: '1.6.3'
  azureServiceConnectionId: 'myConnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'linux-vm'
  poolName: 'newAgentPool'
  appName: 'devops-truonglv9-web-app'

pool: 
  name: '$(poolName)'

stages:
#--------------------------------------------#  
# BUILD
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructureWithTerraform
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    # Run Terraform Init on the pipeline agent 
    - task: TerraformTaskV3@3
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstatetruonglv9'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.storage'
   
    - task: TerraformTaskV3@3
      displayName: 'Terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
    
    # Run Terraform Apply
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    #--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
  
  - job: PublishArtifact
    displayName: 'Publish artifacts: Selenium tests, FakeRestAPI code'
    dependsOn: BuildInfrastructureWithTerraform
    steps:

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive selenium tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-ui-tests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-ui-tests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload selenium tests'
      artifact: drop-ui-tests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI code'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    #FakeRestAPI - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI code'
      artifact: drop-fakerestapi
    
#--------------------------------------------#  
# DEPLOYMENT
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: DeployAppService
    pool: 
      name: '$(poolName)'
    environment: '$(environmentName)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(appName)
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip 
              
 #--------------------------------------------#  
 # Selenium | Functional UI Tests
 # ToDo: 
  - deployment: DeployVirtualMachine
    environment:
        name: '$(environmentName)'
        resourceType: VirtualMachine
    strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: 'Install Dependencies'
                  inputs:
                    targetType: 'inline'
                    script: |
                      #! /bin/bash

                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo apt-get install unzip -y
                      sudo apt-get install -y chromium-browser
                      pip3 install selenium

                      # download chrome driver
                      FILE=chromedriver_linux64.zip
                      if [ -f "$FILE" ]; then
                        echo "$FILE exists."
                      else
                        wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                      fi
                      # install chrome driver
                      unzip chromedriver_linux64.zip
                      sudo mv chromedriver /usr/bin/chromedriver
                      sudo chown root:root /usr/bin/chromedriver
                      sudo chmod +x /usr/bin/chromedriver
                      chromium-browser -version
                      chromedriver --version
                      # install Log Analytics Agent
                      wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w cbe0ec30-c458-41a4-9b6b-421205cf995e -s CI/JBZBRaayR6cbyEZVvFucqeRXRNVICiKRk1GUczQcAb+kQ+hIReFxRJ2AComJs55gkmkXRrvJEwTKAsmL9gA== -d opinsights.azure.com


- stage: SeleniumTests
  jobs:
  - deployment: SeleniumTests
    environment:
      name: '$(environmentName)'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              displayName: 'Download Selenium'
              artifact: drop-ui-tests
            - script: echo "Contents of $(Pipeline.Workspace)/drop-ui-tests" && ls $(Pipeline.Workspace)/drop-ui-tests
              displayName: 'Print Selenium Contents'
            - task: Bash@3
              displayName: 'Install Dependencies and Run UI Tests'
              inputs:
                targetType: 'inline'
                script: |
                  unzip -o $(Pipeline.Workspace)/drop-ui-tests/$(Build.BuildId)-ui-tests.zip -d .
                  sudo mkdir -p /var/logs
                  python3 uitests.py > ui-logs.log
                  cat ui-logs.log
                  sudo mv ui-logs.log /var/logs
                
#--------------------------------------------#  
# TEST
#--------------------------------------------#    
- stage: Test
  jobs:
  - job: TestWithPostman
    displayName: 'Test with Postman'
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: |
          mkdir ~/.npm-global
          npm config set prefix '~/.npm-global'
          export PATH=~/.npm-global/bin:$PATH
          source ~/.profile
          npm install -g newman
        workingDirectory: $(System.DefaultWorkingDirectory)

   # Postman Data Validation Test Suite    
   # ToDo: Verify the working directory and the newman scripts
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: |
          export PATH=~/.npm-global/bin:$PATH
          chmod 744 ~/.npm-global/bin/newman
          newman run validation-data-test.json --reporters cli,junit --reporter-junit-export results\validation-data-test.xml
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

   # Postman Regression Test Suite    
   # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: |
          export PATH=~/.npm-global/bin:$PATH
          chmod 744 ~/.npm-global/bin/newman
          newman run regression-test.json --reporters cli,junit --reporter-junit-export results\regression-test.xml
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

   # Postman - Publish Results 
   # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      displayName: 'Publish test result'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*-test.xml'
        #searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/results'
        mergeTestResults: true
        testRunTitle: 'Postman regression and data validation test'
  
  - job: TestWithJmeter
    displayName: 'Test with Jmeter'
    steps:
    #--------------------------------------------#    
    # Run JMeter test
    - task: CmdLine@2
      displayName: 'Run Jmeter'
      inputs:
        script: |
          echo '-------> Cleanning old data...'
          rm -rf tests
          echo '-------> Cleanned old data'
          export PATH=/home/truonglv9/jmeter/bin:$PATH
          echo '-------> path with jmeter:' $PATH
          echo '-------> create jmeter stress test ...'
          jmeter -n -t stress-test.jmx \
            -l logs/stress-test-output.csv \
            -e -f -o logs/stress-test-log \
            -j logs/stress-test.log

          echo '-------> crete jmeter endurance test ...'
          jmeter -n -t endurance-test.jmx \
            -l logs/endurance-test-output.csv \
            -e -f -o logs/endurance-test-log \
            -j logs/endurance-test.log

          echo '-------> jmeter completed'

        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
    - task: ArchiveFiles@2
      displayName: Archive stress test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/logs/stress-test-log'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/logs/jmeter/jmeter-stress-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: ArchiveFiles@2
      displayName: Archive endurance HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/logs/endurance-test-log'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/logs/jmeter/jmeter-endurance-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: Publish JMeter logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/logs/jmeter'
        artifactName: 'drop-jmeter-logs'
